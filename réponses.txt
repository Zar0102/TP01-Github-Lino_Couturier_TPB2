TP01 - Git
Lino Couturier TPB2

1)
La commande "git status" permet d'afficher les actions possibles de l'utilisateur en fonction de l'état de la branche actuelle (notamment des modifications faites à add ou commit etc). Dans notre cas :
Sur la branche develop

Aucun commit

Fichiers non suivis:
  (utilisez "git add <fichier>..." pour inclure dans ce qui sera validé)
	README.md

aucune modification ajoutée à la validation mais des fichiers non suivis sont présents (utilisez "git add" pour les suivre)

La commande indique sur quelle branche de l'arbre on se situe puis nous indique le nombre de commit effectués. Ensuite elle nous montre les modifications effectués et nous indique quoi faire afin de pouvoir les appliquer.

2)
Sur la branche develop

Aucun commit

Modifications qui seront validées :
  (utilisez "git rm --cached <fichier>..." pour désindexer)
	nouveau fichier : README.md
	nouveau fichier : "r\303\251ponses.txt"

Nous pouvons constater que nos "git add" s'est déroulé sans encombre avec la modification qui a bien été transféré dans la staging area et qui est prête à être commit.

3)
La commande git add déplace les modifications effectuées dans la staging area donc je pense qu'elles se situent dans cet espace.

5)
Consultation de la liste des commits à l'aide de "git log" :
lino@rogerboulot:~/BOULOT/local/s2/Git/TP01/TP1-couturier$ git log
commit 48bc5ca474c3001f9fe88cc4f0244662a73be949 (HEAD -> develop)
Author: Zar <lino.couturier@laposte.net>
Date:   Thu Apr 3 21:09:01 2025 +0200

    premier commit
    
6)
Usage de "git diff" juste après la modification du README et avant l'ajout des modifications :
diff --git a/README.md b/README.md
index 94fc7f9..02b5a7a 100644
--- a/README.md
+++ b/README.md
@@ -1 +1,2 @@
 # TP1 Git - Couturier_Lino
+# Ajout d'une deuxième ligne

Usage de "git diff" suite à l'ajout des modifications de README :
<aucun affichage>

Usage de "git diff --staged" à la suite :
diff --git a/README.md b/README.md
index 94fc7f9..02b5a7a 100644
--- a/README.md
+++ b/README.md
@@ -1 +1,2 @@
 # TP1 Git - Couturier_Lino
+# Ajout d'une deuxième ligne

Nous pouvons constater que "git diff" ne va mettre en avant uniquement les différences de versions dans le Working directory. Une fois passées dans la Staging Area, c'est "git diff --staged" qui va nous permettre de voir les modifications effectuées.

7)
"git log" permet de visualiser tous les commits effectués sur la branche actuelle avec leur hashcode, l'auteur, la date (et l'heure), puis le message de commit.
"git diff" permet de mettre en lumière les modifications effectuées sur l'espace git précisé en paramètre. Sans option, la commande montre les modifications effectués dans le Working directory. Avec l'option "--staged", elle montre celles effectuées dans la Staging Area. La commande montre les modifications d'abord en désignant le fichier modifié puis en surlignant les modifications qui lui ont été apportées en rouge pour les suppressions de lignes et en vert pour les ajouts.
"git show" permet d'avoir le détail concernant un commit en particulier à l'aide de son hashcode. La commande fournie les mêmes informations que dans les logs en montrant également les modifications apportées à l'image de "git diff".
"git status" donne un aperçu global de l'état de la branche actuelle tout espace Git confondu. C'est plus un outil d'aide suggérant les actions à faire afin de conserver son travail correctement. Il indique les fichiers qui ont reçu des modifications ainsi que les commandes à effectuer pour les sauvegarder. Les fichiers surlignés en rouge doivent voir leur modifications ajouté tandis que les fichiers surilignés en vert voient leur modifications prête au commit et donc à la sauvegarde sur le repository.

En terme de différence, "git log" ne sert qu'à visualiser l'historique des commits effectués. On peut ensuite consulter les détails du commit avec "git show" notamment les modifications apportées. Cependant cette visualisation des modifications ne s'applique qu'au commit précisé en paramètre tandis que "git diff" va mettre en lumière les modifications du Working directory (ou de la Staging Area en fonction du paramètre). Quant à lui "git status" permet d'avoir une vue d'ensemble de la branche sur lequel l'on travaille avec des suggestions sur le fait de passer les modifications actuelles vers la Staging Area ou alors vers le Repository par un commit.

8)
Usage de "git status" après l'ajout des deux nouveaux fichiers à la Staging Area :
Sur la branche develop
Modifications qui seront validées :
  (utilisez "git restore --staged <fichier>..." pour désindexer)
	nouveau fichier : brouillon.txt
	nouveau fichier : fichier1.txt
	
9)
La commande "git reset" permet de transférer les modifications d'un fichier de la Staging Area vers le Working directory.

10)
J'utilise "git status" qui me surligne le fichier "brouillon.txt" en rouge ce qui m'indique que ses modifications sont uniquement dans la Staging Area. Suite au commit du "fichier1.txt", il ne devrait plus y avoir aucune mention du "fichier1.txt" étant donné qu'elles ont été commit dans le Repository.

11)

